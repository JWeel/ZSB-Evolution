package objects.behaviour;

import java.util.ArrayList;

import framework.Tile;
import objects.Cell;

public class MoveAnywhereBehaviour extends Behaviour {

	@Override
	public void execute(Cell c) {
		moveAnywhere(c);
	}
	
	// returns true if the move generated by this behaviour is possible
	@Override
	public boolean isPossible(Cell c) {

		return c.properties.currentEnergy > 1;
	}
	
	// moves cell anywhere (if there is no cell)
	public void moveAnywhere(Cell c){
		ArrayList<Tile> moves = c.getMoveSet();
		
		// === DEBUG CODE
		// always move right (DEBUG)
		//Tile destination = moves.get(2); // 2 is right of current pos
		//moveTo(destination,c);
		// === END DEBUG CODE
		
		// moves to ANY position if there is nothing there
		// at this point this will ALWAYS be down, unless there is somethign there, in which case it will be right
		// to make this better, we must make the looping through the moves array be random
		for (Tile destination : moves){
			if (c.worldRef.get().getCellAtPositionCurrent(destination.x,destination.y) == null){
				c.moveTo(destination);
				return;
			}
		}
		
		// if it gets here, it hasn't returned, which means we must trigger isPossible and return false 
		// (in which case it should use hold position behaviour, but we could also put it in here)
		// ^ important discussion point!, considering hunt will use move stuff ^
	}
}